name: Zero-Downtime Deploy to Lightsail

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY_URL: localhost:5000
  IMAGE_NAME: mizual-backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set environment based on branch
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEPLOY_HOST=${{ secrets.LIGHTSAIL_PROD_HOST }}" >> $GITHUB_OUTPUT
            echo "DEPLOY_USER=ubuntu" >> $GITHUB_OUTPUT
            echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=prod-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "USING_PROD=true" >> $GITHUB_OUTPUT
          else
            echo "DEPLOY_HOST=${{ secrets.LIGHTSAIL_DEV_HOST }}" >> $GITHUB_OUTPUT
            echo "DEPLOY_USER=ubuntu" >> $GITHUB_OUTPUT
            echo "ENVIRONMENT=preview" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=dev-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "USING_PROD=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          if [[ "${{ steps.set-env.outputs.USING_PROD }}" == "true" ]]; then
            echo "${{ secrets.LIGHTSAIL_PROD_SSH_KEY }}" > ~/.ssh/deploy_key
          else
            echo "${{ secrets.LIGHTSAIL_DEV_SSH_KEY }}" > ~/.ssh/deploy_key
          fi
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ steps.set-env.outputs.DEPLOY_HOST }} >> ~/.ssh/known_hosts
      
      - name: Build Docker image with ultra-slim Dockerfile
        run: |
          docker build -f Dockerfile.ultra-slim -t ${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }} .
          
      - name: Save Docker image as tar
        run: |
          docker save ${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }} | gzip > mizual-image.tar.gz
          
      - name: Transfer image to server
        run: |
          scp -i ~/.ssh/deploy_key mizual-image.tar.gz ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }}:~/
          
      - name: Create env file on server
        run: |
          if [[ "${{ steps.set-env.outputs.USING_PROD }}" == "true" ]]; then
            echo "${{ secrets.ENV_FILE_PROD }}" | ssh -i ~/.ssh/deploy_key ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }} "cat > /opt/mizual/.env"
          else
            echo "${{ secrets.ENV_FILE_DEV }}" | ssh -i ~/.ssh/deploy_key ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }} "cat > /opt/mizual/.env"
          fi
          
      - name: Deploy to server
        run: |
          ssh -i ~/.ssh/deploy_key ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }} << 'ENDSSH'
            set -e
            
            # Check if this is first deployment
            if [ ! -d /opt/mizual/.git ]; then
              echo "First deployment detected. Setting up repository..."
              cd /opt/mizual
              git clone https://github.com/vizualtech-007/mizual-backend.git .
              git checkout ${{ github.ref_name }}
            else
              echo "Updating existing repository..."
              cd /opt/mizual
              git fetch origin
              git checkout ${{ github.ref_name }}
              git pull origin ${{ github.ref_name }}
            fi
            
            # Load the Docker image
            echo "Loading Docker image..."
            docker load < ~/mizual-image.tar.gz
            
            # Tag for local registry and celery
            docker tag ${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }} localhost:5000/${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }}
            docker tag ${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }} localhost:5000/${{ env.IMAGE_NAME }}:latest
            docker tag ${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }} localhost:5000/mizual-celery:${{ steps.set-env.outputs.IMAGE_TAG }}
            docker tag ${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }} localhost:5000/mizual-celery:latest
            
            # Detect deployment scenario and handle accordingly
            if ! docker ps | grep -q mizual-registry; then
              echo "SCENARIO: First deployment (no registry) - Starting all services..."
              cd /opt/mizual
              
              # Start registry and watchtower (registry-data dir created by setup script)
              docker-compose -f docker-compose.zero-downtime.yml up -d registry watchtower
              sleep 10  # Wait for registry to be ready
              
              # Test registry is working
              curl -f http://localhost:5000/v2/ || (echo "Registry not responding!" && exit 1)
              
              # Push images to registry
              echo "Pushing images to local registry..."
              docker push localhost:5000/${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }}
              docker push localhost:5000/${{ env.IMAGE_NAME }}:latest
              docker push localhost:5000/mizual-celery:${{ steps.set-env.outputs.IMAGE_TAG }}
              docker push localhost:5000/mizual-celery:latest
              
              # Start all application services
              docker-compose -f docker-compose.zero-downtime.yml up -d
              echo "All services started for first deployment!"
              
            elif ! docker ps | grep -q mizual-backend; then
              echo "SCENARIO: Registry exists but containers stopped - Restarting services..."
              cd /opt/mizual
              
              # Push images to registry first
              docker push localhost:5000/${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }}
              docker push localhost:5000/${{ env.IMAGE_NAME }}:latest
              docker push localhost:5000/mizual-celery:${{ steps.set-env.outputs.IMAGE_TAG }}
              docker push localhost:5000/mizual-celery:latest
              
              # Ensure registry and watchtower are running
              docker-compose -f docker-compose.zero-downtime.yml up -d registry watchtower
              sleep 5
              
              # Start all application services (they will use latest images from registry)
              docker-compose -f docker-compose.zero-downtime.yml up -d
              echo "All services restarted with latest images!"
              
            else
              echo "SCENARIO: Normal zero-downtime update - Using Watchtower..."
              # Push to local registry
              docker push localhost:5000/${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }}
              docker push localhost:5000/${{ env.IMAGE_NAME }}:latest
              docker push localhost:5000/mizual-celery:${{ steps.set-env.outputs.IMAGE_TAG }}
              docker push localhost:5000/mizual-celery:latest
              
              # Ensure Watchtower is running
              if ! docker ps | grep -q mizual-watchtower; then
                echo "Starting Watchtower..."
                cd /opt/mizual
                docker-compose -f docker-compose.zero-downtime.yml up -d watchtower
              fi
              
              echo "Images pushed! Watchtower will detect and update containers within 1 minute."
            fi
            
            # Clean up old images from registry (keep only latest 5 versions)
            echo "Cleaning up old registry images..."
            
            # Get all tags for backend
            BACKEND_TAGS=$(curl -s http://localhost:5000/v2/mizual-backend/tags/list | python3 -c "import sys,json; data=json.load(sys.stdin); [print(tag) for tag in data.get('tags',[])]" | grep -E '^(dev|prod)-' | sort -r)
            BACKEND_COUNT=$(echo "$BACKEND_TAGS" | wc -l)
            if [ $BACKEND_COUNT -gt 5 ]; then
              echo "Found $BACKEND_COUNT backend versions, keeping only latest 5..."
              echo "$BACKEND_TAGS" | tail -n +6 | while read TAG; do
                echo "Deleting mizual-backend:$TAG from registry"
                # Get the digest for this tag
                DIGEST=$(curl -s -I -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
                  http://localhost:5000/v2/mizual-backend/manifests/$TAG | grep Docker-Content-Digest | awk '{print $2}' | tr -d '\r')
                if [ ! -z "$DIGEST" ]; then
                  # Delete the manifest from registry
                  curl -X DELETE http://localhost:5000/v2/mizual-backend/manifests/$DIGEST 2>/dev/null || true
                fi
                # Also remove local image
                docker rmi localhost:5000/mizual-backend:$TAG 2>/dev/null || true
              done
            fi
            
            # Get all tags for celery
            CELERY_TAGS=$(curl -s http://localhost:5000/v2/mizual-celery/tags/list | python3 -c "import sys,json; data=json.load(sys.stdin); [print(tag) for tag in data.get('tags',[])]" | grep -E '^(dev|prod)-' | sort -r)
            CELERY_COUNT=$(echo "$CELERY_TAGS" | wc -l)
            if [ $CELERY_COUNT -gt 5 ]; then
              echo "Found $CELERY_COUNT celery versions, keeping only latest 5..."
              echo "$CELERY_TAGS" | tail -n +6 | while read TAG; do
                echo "Deleting mizual-celery:$TAG from registry"
                # Get the digest for this tag
                DIGEST=$(curl -s -I -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
                  http://localhost:5000/v2/mizual-celery/manifests/$TAG | grep Docker-Content-Digest | awk '{print $2}' | tr -d '\r')
                if [ ! -z "$DIGEST" ]; then
                  # Delete the manifest from registry
                  curl -X DELETE http://localhost:5000/v2/mizual-celery/manifests/$DIGEST 2>/dev/null || true
                fi
                # Also remove local image
                docker rmi localhost:5000/mizual-celery:$TAG 2>/dev/null || true
              done
            fi
            
            # Run registry garbage collection to actually free up space
            echo "Running registry garbage collection..."
            docker exec mizual-registry registry garbage-collect /etc/docker/registry/config.yml 2>/dev/null || true
            
            # Clean up local Docker system
            docker system prune -f --volumes
            
            # Show registry disk usage after cleanup
            echo "Registry storage after cleanup: $(du -sh /opt/mizual/registry-data | cut -f1)"
            
            # Log current deployment version
            echo "================================================"
            echo "DEPLOYMENT SUCCESSFUL!"
            echo "Environment: ${{ steps.set-env.outputs.ENVIRONMENT }}"
            echo "Version deployed: ${{ steps.set-env.outputs.IMAGE_TAG }}"
            echo "Git commit: ${{ github.sha }}"
            echo "Deployed by: ${{ github.actor }}"
            echo "================================================"
            
            # Save deployment info to file for tracking
            echo "${{ steps.set-env.outputs.IMAGE_TAG }}" > /opt/mizual/CURRENT_VERSION
            echo "Commit: ${{ github.sha }}" >> /opt/mizual/CURRENT_VERSION
            echo "Deployed: $(date)" >> /opt/mizual/CURRENT_VERSION
            echo "Branch: ${{ github.ref_name }}" >> /opt/mizual/CURRENT_VERSION
            
            # Clean up transferred image
            rm ~/mizual-image.tar.gz
          ENDSSH
          
      - name: Verify deployment
        run: |
          sleep 10
          ssh -i ~/.ssh/deploy_key ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }} << 'ENDSSH'
            echo "Checking container status..."
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}" | grep -E "mizual|registry|watchtower"
            
            echo ""
            echo "Current deployed version:"
            cat /opt/mizual/CURRENT_VERSION 2>/dev/null || echo "Version file not found"
            
            echo ""
            echo "Checking health endpoint..."
            curl -f http://localhost/health || echo "Health check pending..."
            
            echo ""
            echo "Registry contents:"
            curl -s http://localhost:5000/v2/mizual-backend/tags/list | python3 -c "import sys,json; data=json.load(sys.stdin); [print(tag) for tag in data.get('tags',[])]" | grep -E '^(dev|prod)-' | head -5 || echo "No versioned tags found"
          ENDSSH
      
      - name: Wait for Watchtower and verify deployment
        run: |
          echo "Waiting for Watchtower to detect and deploy new image..."
          echo "Expected deployment version: ${{ steps.set-env.outputs.IMAGE_TAG }}"
          
          # Wait up to 3 minutes (Watchtower polls every 1 minute + buffer)
          max_attempts=12  # 12 attempts * 15 seconds = 3 minutes
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            attempt=$((attempt + 1))
            echo "Attempt $attempt/$max_attempts: Checking deployment status..."
            
            # Check if the version endpoint returns the expected version
            if response=$(ssh -i ~/.ssh/deploy_key ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }} "curl -s http://localhost/version"); then
              echo "Version endpoint response: $response"
              
              # Extract version_tag from JSON response
              if deployed_version=$(echo "$response" | python3 -c "import sys,json; data=json.load(sys.stdin); print(data.get('version_tag',''))" 2>/dev/null); then
                echo "Currently deployed version: $deployed_version"
                echo "Expected version: ${{ steps.set-env.outputs.IMAGE_TAG }}"
                
                if [ "$deployed_version" = "${{ steps.set-env.outputs.IMAGE_TAG }}" ]; then
                  echo "SUCCESS: Deployment verified! Version ${{ steps.set-env.outputs.IMAGE_TAG }} is now live."
                  
                  # Final health check
                  echo "Performing final health check..."
                  if ssh -i ~/.ssh/deploy_key ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }} "curl -f --connect-timeout 10 --max-time 30 http://localhost/health"; then
                    echo "Health check passed"
                    echo "Zero-downtime deployment completed successfully!"
                    exit 0
                  else
                    echo "WARNING: Deployment version matches but health check failed"
                    echo "Deployment is successful but health endpoint not responding as expected"
                    exit 1
                  fi
                fi
              else
                echo "Could not parse version from API response"
              fi
            else
              echo "API not responding, waiting..."
            fi
            
            if [ $attempt -lt $max_attempts ]; then
              echo "Waiting 15 seconds before next check..."
              sleep 15
            fi
          done
          
          echo "TIMEOUT: Deployment verification failed after 3 minutes"
          echo "This could mean:"
          echo "1. Watchtower hasn't detected the new image yet (wait longer - polls every 1 minute)"
          echo "2. There's an issue with the new image"
          echo "3. The version endpoint is not working"
          
          # Show final status for debugging
          ssh -i ~/.ssh/deploy_key ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }} << 'ENDSSH'
            echo ""
            echo "=== FINAL STATUS FOR DEBUGGING ==="
            echo "Watchtower logs (last 20 lines):"
            docker logs mizual-watchtower --tail 20 || echo "Could not get Watchtower logs"
            echo ""
            echo "Container status:"
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.CreatedAt}}" | grep mizual || echo "No mizual containers found"
            echo ""
            echo "Version file contents:"
            cat /opt/mizual/CURRENT_VERSION 2>/dev/null || echo "Version file not found"
          ENDSSH
          
          exit 1
      
      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
          docker rmi ${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }} || true