name: Zero-Downtime Deploy to Lightsail

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY_URL: localhost:5000
  IMAGE_NAME: mizual-backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set environment based on branch
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEPLOY_HOST=${{ secrets.LIGHTSAIL_PROD_HOST }}" >> $GITHUB_OUTPUT
            echo "DEPLOY_USER=ubuntu" >> $GITHUB_OUTPUT
            echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=prod-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "USING_PROD=true" >> $GITHUB_OUTPUT
          else
            echo "DEPLOY_HOST=${{ secrets.LIGHTSAIL_DEV_HOST }}" >> $GITHUB_OUTPUT
            echo "DEPLOY_USER=ubuntu" >> $GITHUB_OUTPUT
            echo "ENVIRONMENT=preview" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=dev-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "USING_PROD=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          if [[ "${{ steps.set-env.outputs.USING_PROD }}" == "true" ]]; then
            echo "${{ secrets.LIGHTSAIL_PROD_SSH_KEY }}" > ~/.ssh/deploy_key
          else
            echo "${{ secrets.LIGHTSAIL_DEV_SSH_KEY }}" > ~/.ssh/deploy_key
          fi
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ steps.set-env.outputs.DEPLOY_HOST }} >> ~/.ssh/known_hosts
      
      - name: Build Docker image with ultra-slim Dockerfile
        run: |
          docker build -f Dockerfile.ultra-slim -t ${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }} .
          
      - name: Save Docker image as tar
        run: |
          docker save ${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }} | gzip > mizual-image.tar.gz
          
      - name: Transfer image to server
        run: |
          scp -i ~/.ssh/deploy_key mizual-image.tar.gz ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }}:~/
          
      - name: Create env file from Parameter Store
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.set-env.outputs.USING_PROD == 'true' && secrets.PROD_AWS_ACCESS_KEY_ID || secrets.DEV_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.set-env.outputs.USING_PROD == 'true' && secrets.PROD_AWS_SECRET_ACCESS_KEY || secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
        run: |
          echo "Fetching environment variables from AWS Parameter Store..."
          
          # Create .env file from Parameter Store
          echo "# Generated from AWS Parameter Store $(date)" > .env
          
          # Fetch all parameters from Parameter Store
          aws ssm get-parameters-by-path \
            --path "/mizual" \
            --recursive \
            --with-decryption \
            --query 'Parameters[*].[Name,Value]' \
            --output text | \
          while IFS=$'\t' read -r name value; do
            # Extract parameter name (remove /mizual/ prefix)
            param_name=$(basename "$name" | tr '[:lower:]' '[:upper:]')
            echo "${param_name}=${value}" >> .env
          done
          
          # Add environment-specific parameters ONLY if not present
          if [[ "${{ steps.set-env.outputs.USING_PROD }}" == "true" ]]; then
            grep -q "^DATABASE_SCHEMA=" .env || echo "DATABASE_SCHEMA=public" >> .env
            grep -q "^STORAGE_PATH_PREFIX=" .env || echo "STORAGE_PATH_PREFIX=production" >> .env
          else
            grep -q "^DATABASE_SCHEMA=" .env || echo "DATABASE_SCHEMA=preview" >> .env
            grep -q "^STORAGE_PATH_PREFIX=" .env || echo "STORAGE_PATH_PREFIX=preview" >> .env
          fi
          
          # Copy GEMINI_API_KEY to LLM_API_KEY if needed
          if grep -q "^GEMINI_API_KEY=" .env && ! grep -q "^LLM_API_KEY=" .env; then
            GEMINI_KEY=$(grep "^GEMINI_API_KEY=" .env | cut -d'=' -f2-)
            echo "LLM_API_KEY=$GEMINI_KEY" >> .env
          fi
          
          echo "Environment file created with $(wc -l < .env) variables"
          
          # Copy to server
          scp -i ~/.ssh/deploy_key .env ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }}:/opt/mizual/.env
          
      - name: Setup and Update Repository
        run: |
          ssh -i ~/.ssh/deploy_key ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }} << 'ENDSSH'
            set -e
            
            # Check if this is first deployment or if directory exists but is not a git repo
            if [ ! -d /opt/mizual/.git ]; then
              echo "First deployment detected. Setting up repository..."
              
              # Check if directory exists but is not a git repo
              if [ -d /opt/mizual ]; then
                echo "Directory /opt/mizual exists but is not a git repository"
                echo "Backing up any existing files..."
                
                # Backup any important files if they exist
                if [ -f /opt/mizual/.env ]; then
                  echo "Backing up existing .env file..."
                  cp /opt/mizual/.env /opt/mizual/.env.backup
                fi
                
                if [ -d /opt/mizual/registry-data ]; then
                  echo "Registry data directory exists and will be preserved"
                fi
                
                # Create a temporary directory for git clone
                echo "Cloning repository to temporary location..."
                cd /tmp
                rm -rf mizual-temp
                git clone https://github.com/vizualtech-007/mizual-backend.git mizual-temp
                cd mizual-temp
                git checkout ${{ github.ref_name }}
                
                # Copy git repo content to /opt/mizual
                echo "Moving repository content to /opt/mizual..."
                cp -r .git /opt/mizual/
                cp -r * /opt/mizual/ 2>/dev/null || true
                cp -r .* /opt/mizual/ 2>/dev/null || true
                
                # Clean up temp directory
                cd /
                rm -rf /tmp/mizual-temp
                
                # Restore backed up .env if it existed
                if [ -f /opt/mizual/.env.backup ]; then
                  echo "Restoring .env file..."
                  mv /opt/mizual/.env.backup /opt/mizual/.env
                fi
                
                cd /opt/mizual
                echo "Repository initialized in existing directory"
              else
                # Directory doesn't exist, create and clone
                echo "Creating /opt/mizual directory..."
                sudo mkdir -p /opt/mizual
                sudo chown ubuntu:ubuntu /opt/mizual
                cd /opt/mizual
                git clone https://github.com/vizualtech-007/mizual-backend.git .
                git checkout ${{ github.ref_name }}
              fi
            else
              echo "Updating existing repository..."
              cd /opt/mizual
              git fetch origin
              git checkout ${{ github.ref_name }}
              
              # Handle potential conflicts with modified and untracked files
              if ! git pull origin ${{ github.ref_name }}; then
                echo "Git pull failed, likely due to local changes. Backing up and retrying..."
                
                # Back up any modified or untracked files
                mkdir -p /tmp/mizual-backup
                
                # Handle modified files (M status)
                git status --porcelain | grep '^ M' | cut -c4- | while read file; do
                  if [ -f "$file" ]; then
                    echo "Backing up modified file: $file"
                    cp "$file" "/tmp/mizual-backup/$(basename $file).modified.backup" || true
                  fi
                done
                
                # Handle untracked files (?? status)
                git status --porcelain | grep '^??' | cut -c4- | while read file; do
                  if [ -f "$file" ]; then
                    echo "Backing up untracked file: $file"
                    cp "$file" "/tmp/mizual-backup/$(basename $file).untracked.backup" || true
                  fi
                done
                
                # Reset any local changes (this will discard modified files)
                echo "Resetting local changes..."
                git reset --hard HEAD
                
                # Remove untracked files (but skip registry-data)
                git status --porcelain | grep '^??' | cut -c4- | while read file; do
                  # Skip registry-data directory to avoid permission errors
                  if [[ "$file" != registry-data* ]]; then
                    echo "Removing untracked file: $file"
                    rm -f "$file" || true
                  fi
                done
                
                # Now retry the pull
                git pull origin ${{ github.ref_name }}
                
                echo "Repository updated successfully after handling conflicts"
              fi
            fi
            
            # Ensure monitoring scripts exist (one-time setup or after fresh deployment)
            echo "=== Checking monitoring setup ==="
            
            # Check if monitoring scripts exist
            SCRIPTS_EXIST=false
            if [ -f /opt/mizual-monitoring/ship-logs.sh ] && [ -f /opt/mizual-monitoring/check-alerts.sh ]; then
              SCRIPTS_EXIST=true
              echo "✓ Monitoring scripts found"
            else
              echo "✗ Monitoring scripts missing"
            fi
            
            # Check if cron jobs exist (in ubuntu user's crontab)
            CRON_EXISTS=false
            if crontab -l 2>/dev/null | grep -q "/opt/mizual-monitoring/ship-logs.sh"; then
              CRON_EXISTS=true
              echo "✓ Cron jobs found in ubuntu user crontab"
            else
              echo "✗ Cron jobs missing from ubuntu user crontab"
            fi
            
            # If either scripts or cron are missing, run setup
            if [ "$SCRIPTS_EXIST" = "false" ] || [ "$CRON_EXISTS" = "false" ]; then
              echo "Running monitoring setup to fix missing components..."
              if [ -f /opt/mizual/lightsail-setup/setup-monitoring.sh ]; then
                # Run setup script (it handles permissions correctly)
                bash /opt/mizual/lightsail-setup/setup-monitoring.sh
                
                # Verify setup was successful
                echo "=== Verification after setup ==="
                if [ -f /opt/mizual-monitoring/ship-logs.sh ]; then
                  echo "✓ ship-logs.sh created"
                else
                  echo "✗ ship-logs.sh NOT created - setup may have failed"
                fi
                
                if [ -f /opt/mizual-monitoring/check-alerts.sh ]; then
                  echo "✓ check-alerts.sh created"
                else
                  echo "✗ check-alerts.sh NOT created - setup may have failed"
                fi
                
                if crontab -l 2>/dev/null | grep -q "/opt/mizual-monitoring/ship-logs.sh"; then
                  echo "✓ Cron jobs successfully added"
                  echo "Current cron jobs:"
                  crontab -l | grep mizual-monitoring
                else
                  echo "✗ CRITICAL: Cron jobs NOT added - monitoring will not work!"
                fi
              else
                echo "ERROR: setup-monitoring.sh not found at /opt/mizual/lightsail-setup/"
                echo "Monitoring will not be configured!"
              fi
            else
              echo "✓ Monitoring already fully configured"
              echo "Current cron jobs:"
              crontab -l | grep mizual-monitoring
            fi
            
            echo "=== End monitoring check ==="
            
            # Ensure CURRENT_VERSION file exists before any Docker operations
            # This prevents Docker from creating it as a directory when mounting
            if [ -d /opt/mizual/CURRENT_VERSION ]; then
              echo "ERROR: CURRENT_VERSION exists as a directory, removing it..."
              rm -rf /opt/mizual/CURRENT_VERSION
            fi
            
            if [ ! -f /opt/mizual/CURRENT_VERSION ]; then
              echo "Creating initial CURRENT_VERSION file to prevent Docker from creating it as directory..."
              echo "initial-deployment" > /opt/mizual/CURRENT_VERSION
              echo "Commit: pending" >> /opt/mizual/CURRENT_VERSION
              echo "Deployed: $(date)" >> /opt/mizual/CURRENT_VERSION
              echo "Branch: ${{ github.ref_name }}" >> /opt/mizual/CURRENT_VERSION
            fi
          ENDSSH
      
      - name: Load and Push Docker Images
        run: |
          ssh -i ~/.ssh/deploy_key ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }} << 'ENDSSH'
            set -e
            
            # Load the Docker image
            echo "Loading Docker image..."
            docker load < ~/mizual-image.tar.gz
            
            # Tag for local registry (backend and celery use same image)
            echo "Tagging images for registry..."
            docker tag ${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }} localhost:5000/mizual-backend:${{ steps.set-env.outputs.IMAGE_TAG }} || { echo "ERROR: Failed to tag backend with version"; exit 1; }
            docker tag ${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }} localhost:5000/mizual-backend:latest || { echo "ERROR: Failed to tag backend as latest"; exit 1; }
            # Celery uses the same image as backend, just different registry name
            docker tag ${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }} localhost:5000/mizual-celery:${{ steps.set-env.outputs.IMAGE_TAG }} || { echo "ERROR: Failed to tag celery with version"; exit 1; }
            docker tag ${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }} localhost:5000/mizual-celery:latest || { echo "ERROR: Failed to tag celery as latest"; exit 1; }
            
            # CRITICAL: Push ALL tags to registry immediately after tagging
            echo "Pushing all tags to registry..."
            
            # Check if registry is running first
            if ! docker ps | grep -q mizual-registry; then
              echo "ERROR: Registry is not running! Cannot push images."
              echo "Starting registry..."
              cd /opt/mizual
              docker-compose -f docker-compose.zero-downtime.yml up -d registry
              sleep 10
            fi
            
            # Push with verification
            echo "Pushing backend version tag..."
            docker push localhost:5000/mizual-backend:${{ steps.set-env.outputs.IMAGE_TAG }} || { echo "ERROR: Failed to push backend version tag"; exit 1; }
            
            echo "Pushing backend:latest tag..."
            docker push localhost:5000/mizual-backend:latest || { echo "ERROR: Failed to push backend:latest"; exit 1; }
            
            echo "Pushing celery version tag..."
            docker push localhost:5000/mizual-celery:${{ steps.set-env.outputs.IMAGE_TAG }} || { echo "ERROR: Failed to push celery version tag"; exit 1; }
            
            echo "Pushing celery:latest tag..."
            docker push localhost:5000/mizual-celery:latest || { echo "ERROR: Failed to push celery:latest"; exit 1; }
            
            # Verify the tags actually made it to the registry
            echo "Verifying pushed tags in registry..."
            sleep 2
            
            if ! curl -s http://localhost:5000/v2/mizual-backend/tags/list | grep -q '"latest"'; then
              echo "ERROR: backend:latest not found in registry after push!"
              echo "Registry tags:"
              curl -s http://localhost:5000/v2/mizual-backend/tags/list
              exit 1
            fi
            
            if ! curl -s http://localhost:5000/v2/mizual-celery/tags/list | grep -q '"latest"'; then
              echo "ERROR: celery:latest not found in registry after push!"
              echo "Registry tags:"
              curl -s http://localhost:5000/v2/mizual-celery/tags/list
              exit 1
            fi
            
            echo "✓ All tags successfully pushed and verified in registry"
            
            # Ensure latest tags always exist in registry (failsafe)
            echo "Failsafe: Ensuring latest tags exist in registry..."
            # Check if registry is accessible first
            if curl -f -s http://localhost:5000/v2/ > /dev/null; then
              echo "Registry is accessible, verifying and pushing latest tags if needed..."
              # Only push if not already in registry
              if ! curl -s http://localhost:5000/v2/mizual-backend/tags/list | grep -q '"latest"'; then
                echo "Pushing backend:latest..."
                docker push localhost:5000/mizual-backend:latest || echo "ERROR: Failed to push backend:latest"
              fi
              if ! curl -s http://localhost:5000/v2/mizual-celery/tags/list | grep -q '"latest"'; then
                echo "Pushing celery:latest..."
                docker push localhost:5000/mizual-celery:latest || echo "ERROR: Failed to push celery:latest"
              fi
              
              # Verify both latest tags exist
              echo "Verifying latest tags in registry:"
              curl -s http://localhost:5000/v2/mizual-backend/tags/list | grep -q '"latest"' && echo "✓ backend:latest exists" || echo "✗ backend:latest missing"
              curl -s http://localhost:5000/v2/mizual-celery/tags/list | grep -q '"latest"' && echo "✓ celery:latest exists" || echo "✗ celery:latest missing"
            else
              echo "Registry not accessible yet, will be started in deployment scenario"
            fi
          ENDSSH
            
      - name: Deploy Services
        run: |
          ssh -i ~/.ssh/deploy_key ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }} << 'ENDSSH'
            set -e
            
            # Detect deployment scenario and handle accordingly
            if ! docker ps | grep -q mizual-registry; then
              echo "SCENARIO: First deployment (no registry) - Starting all services..."
              cd /opt/mizual
              
              # Start registry and watchtower (registry-data dir created by setup script)
              docker-compose -f docker-compose.zero-downtime.yml up -d registry watchtower
              sleep 10  # Wait for registry to be ready
              
              # Test registry is working
              curl -f http://localhost:5000/v2/ || (echo "Registry not responding!" && exit 1)
              
              # Push images to registry
              echo "Pushing images to local registry..."
              docker push localhost:5000/mizual-backend:${{ steps.set-env.outputs.IMAGE_TAG }}
              docker push localhost:5000/mizual-backend:latest
              docker push localhost:5000/mizual-celery:${{ steps.set-env.outputs.IMAGE_TAG }}
              docker push localhost:5000/mizual-celery:latest
              
              # Start all application services
              docker-compose -f docker-compose.zero-downtime.yml up -d
              echo "All services started for first deployment!"
              
            elif ! docker ps | grep -q mizual-backend; then
              echo "SCENARIO: Registry exists but containers stopped - Restarting services..."
              cd /opt/mizual
              
              # Push images to registry first
              docker push localhost:5000/mizual-backend:${{ steps.set-env.outputs.IMAGE_TAG }}
              docker push localhost:5000/mizual-backend:latest
              docker push localhost:5000/mizual-celery:${{ steps.set-env.outputs.IMAGE_TAG }}
              docker push localhost:5000/mizual-celery:latest
              
              # Remove any stopped containers to force fresh pull from registry
              echo "Removing stopped containers to ensure fresh pull from registry..."
              docker rm mizual-backend mizual-celery 2>/dev/null || true
              
              # Ensure registry and watchtower are running
              docker-compose -f docker-compose.zero-downtime.yml up -d registry watchtower
              sleep 5
              
              # Pull latest images from registry explicitly
              echo "Pulling latest images from registry..."
              docker pull localhost:5000/mizual-backend:latest
              docker pull localhost:5000/mizual-celery:latest
              
              # Start all application services (they will use registry images)
              docker-compose -f docker-compose.zero-downtime.yml up -d
              echo "All services restarted with latest images from registry!"
              
            else
              echo "SCENARIO: Normal zero-downtime update - Using Watchtower..."
              # Push to local registry
              echo "Pushing images to registry..."
              docker push localhost:5000/mizual-backend:${{ steps.set-env.outputs.IMAGE_TAG }}
              docker push localhost:5000/mizual-backend:latest
              docker push localhost:5000/mizual-celery:${{ steps.set-env.outputs.IMAGE_TAG }}
              docker push localhost:5000/mizual-celery:latest
              
              # Verify images are in registry
              echo "Verifying images in registry..."
              echo "Backend tags:"
              curl -s http://localhost:5000/v2/mizual-backend/tags/list | python3 -c "import sys,json; data=json.load(sys.stdin); [print('  ' + tag) for tag in data.get('tags',[])]" || echo "  Failed to get backend tags"
              echo "Celery tags:"
              curl -s http://localhost:5000/v2/mizual-celery/tags/list | python3 -c "import sys,json; data=json.load(sys.stdin); [print('  ' + tag) for tag in data.get('tags',[])]" || echo "  Failed to get celery tags"
              
              # Give registry a moment to settle
              sleep 3
              
              # Ensure Watchtower is running
              if ! docker ps | grep -q mizual-watchtower; then
                echo "Starting Watchtower..."
                cd /opt/mizual
                docker-compose -f docker-compose.zero-downtime.yml up -d watchtower
                sleep 5
              fi
              
              # Force Watchtower to check now (send SIGUSR1 signal)
              if docker ps | grep -q mizual-watchtower; then
                echo "Triggering immediate Watchtower update check..."
                docker kill -s SIGUSR1 mizual-watchtower || echo "Failed to signal Watchtower (container may be restarting)"
              fi
              
              echo "Images pushed! Waiting for Watchtower to update containers..."
              echo "Current time: $(date)"
              
              # Wait for Watchtower to update the containers
              echo "Monitoring Watchtower update progress..."
              MAX_WAIT=120  # Maximum 2 minutes wait
              WAIT_TIME=0
              UPDATE_COMPLETE=false
              
              while [ $WAIT_TIME -lt $MAX_WAIT ]; do
                # Check if containers are running the new image
                BACKEND_IMAGE=$(docker ps --format "{{.Image}}" --filter "name=mizual-backend" | head -1)
                CELERY_IMAGE=$(docker ps --format "{{.Image}}" --filter "name=mizual-celery" | head -1)
                
                if [ "$BACKEND_IMAGE" = "localhost:5000/mizual-backend:latest" ] && [ "$CELERY_IMAGE" = "localhost:5000/mizual-celery:latest" ]; then
                  # Check if the actual image ID matches what we just pushed
                  BACKEND_ID=$(docker inspect mizual-backend --format='{{.Image}}' | cut -d: -f2 | cut -c1-12)
                  EXPECTED_ID=$(docker inspect localhost:5000/mizual-backend:latest --format='{{.Id}}' | cut -d: -f2 | cut -c1-12)
                  
                  if [ "$BACKEND_ID" = "$EXPECTED_ID" ]; then
                    UPDATE_COMPLETE=true
                    echo "✓ Watchtower successfully updated containers!"
                    break
                  fi
                fi
                
                echo "  Waiting for Watchtower to update... ($WAIT_TIME/$MAX_WAIT seconds)"
                sleep 10
                WAIT_TIME=$((WAIT_TIME + 10))
              done
              
              if [ "$UPDATE_COMPLETE" = "false" ]; then
                echo "WARNING: Watchtower update may not have completed within $MAX_WAIT seconds"
                echo "Containers may update in the next Watchtower cycle"
              fi
            fi
            
            # CRITICAL: Ensure :latest tags exist in registry for Watchtower
            echo "Final verification of :latest tags in registry..."
            BACKEND_HAS_LATEST=$(curl -s http://localhost:5000/v2/mizual-backend/tags/list | grep -c '"latest"' || echo "0")
            CELERY_HAS_LATEST=$(curl -s http://localhost:5000/v2/mizual-celery/tags/list | grep -c '"latest"' || echo "0")
            
            if [ "$BACKEND_HAS_LATEST" = "0" ] || [ "$CELERY_HAS_LATEST" = "0" ]; then
              echo "WARNING: Missing :latest tags, ensuring they exist..."
              # Re-tag from the original image to ensure correct tagging
              docker tag ${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }} localhost:5000/mizual-backend:latest
              docker tag ${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }} localhost:5000/mizual-celery:latest
              
              # Force push both latest tags
              echo "Force pushing :latest tags to registry..."
              docker push localhost:5000/mizual-backend:latest || echo "Failed to push backend:latest"
              docker push localhost:5000/mizual-celery:latest || echo "Failed to push celery:latest"
              
              # Verify they were pushed
              sleep 2
              BACKEND_CHECK=$(curl -s http://localhost:5000/v2/mizual-backend/tags/list | grep -c '"latest"' || echo "0")
              CELERY_CHECK=$(curl -s http://localhost:5000/v2/mizual-celery/tags/list | grep -c '"latest"' || echo "0")
              
              if [ "$BACKEND_CHECK" = "0" ] || [ "$CELERY_CHECK" = "0" ]; then
                echo "ERROR: Failed to push :latest tags to registry!"
                echo "Manual intervention may be required."
                exit 1
              else
                echo "✓ Latest tags pushed and verified successfully!"
              fi
            else
              echo "✓ Both :latest tags confirmed in registry"
            fi
          ENDSSH
            
      - name: Cleanup and Finalize
        run: |
          ssh -i ~/.ssh/deploy_key ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }} << 'ENDSSH'
            set -e
            
            # Clean up old images from registry (keep only latest 5 versions)
            echo "Cleaning up old registry images..."
            
            # Get all tags for backend
            BACKEND_TAGS=$(curl -s http://localhost:5000/v2/mizual-backend/tags/list | python3 -c "import sys,json; data=json.load(sys.stdin); [print(tag) for tag in data.get('tags',[])]" | grep -E '^(dev|prod)-' | sort -r)
            BACKEND_COUNT=$(echo "$BACKEND_TAGS" | wc -l)
            if [ $BACKEND_COUNT -gt 5 ]; then
              echo "Found $BACKEND_COUNT backend versions, keeping only latest 5..."
              echo "$BACKEND_TAGS" | tail -n +6 | while read TAG; do
                echo "Deleting mizual-backend:$TAG from registry"
                # Get the digest for this tag
                DIGEST=$(curl -s -I -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
                  http://localhost:5000/v2/mizual-backend/manifests/$TAG | grep Docker-Content-Digest | awk '{print $2}' | tr -d '\r')
                if [ ! -z "$DIGEST" ]; then
                  # Delete the manifest from registry
                  curl -X DELETE http://localhost:5000/v2/mizual-backend/manifests/$DIGEST 2>/dev/null || true
                fi
                # Also remove local image
                docker rmi localhost:5000/mizual-backend:$TAG 2>/dev/null || true
              done
            fi
            
            # Get all tags for celery
            CELERY_TAGS=$(curl -s http://localhost:5000/v2/mizual-celery/tags/list | python3 -c "import sys,json; data=json.load(sys.stdin); [print(tag) for tag in data.get('tags',[])]" | grep -E '^(dev|prod)-' | sort -r)
            CELERY_COUNT=$(echo "$CELERY_TAGS" | wc -l)
            if [ $CELERY_COUNT -gt 5 ]; then
              echo "Found $CELERY_COUNT celery versions, keeping only latest 5..."
              echo "$CELERY_TAGS" | tail -n +6 | while read TAG; do
                echo "Deleting mizual-celery:$TAG from registry"
                # Get the digest for this tag
                DIGEST=$(curl -s -I -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
                  http://localhost:5000/v2/mizual-celery/manifests/$TAG | grep Docker-Content-Digest | awk '{print $2}' | tr -d '\r')
                if [ ! -z "$DIGEST" ]; then
                  # Delete the manifest from registry
                  curl -X DELETE http://localhost:5000/v2/mizual-celery/manifests/$DIGEST 2>/dev/null || true
                fi
                # Also remove local image
                docker rmi localhost:5000/mizual-celery:$TAG 2>/dev/null || true
              done
            fi
            
            # Run registry garbage collection to actually free up space
            echo "Running registry garbage collection..."
            docker exec mizual-registry registry garbage-collect /etc/docker/registry/config.yml 2>/dev/null || true
            
            # Clean up local Docker system
            docker system prune -f --volumes
            
            # Show registry disk usage after cleanup
            echo "Registry storage after cleanup: $(du -sh /opt/mizual/registry-data | cut -f1)"
            
            # Verify latest tags still exist after cleanup
            echo "Verifying latest tags after cleanup:"
            BACKEND_HAS_LATEST=$(curl -s http://localhost:5000/v2/mizual-backend/tags/list | python3 -c "import sys,json; data=json.load(sys.stdin); print('latest' in data.get('tags',[]))" || echo "False")
            CELERY_HAS_LATEST=$(curl -s http://localhost:5000/v2/mizual-celery/tags/list | python3 -c "import sys,json; data=json.load(sys.stdin); print('latest' in data.get('tags',[]))" || echo "False")
            
            echo "Backend latest tag exists: $BACKEND_HAS_LATEST"
            echo "Celery latest tag exists: $CELERY_HAS_LATEST"
            
            # CRITICAL: Fail if latest tags are missing
            if [ "$BACKEND_HAS_LATEST" != "True" ] || [ "$CELERY_HAS_LATEST" != "True" ]; then
              echo "================================================"
              echo "DEPLOYMENT FAILED!"
              echo "ERROR: :latest tags are missing from registry!"
              echo "This will prevent Watchtower from working."
              echo "================================================"
              exit 1
            fi
            
            # Log current deployment version
            echo "================================================"
            echo "DEPLOYMENT SUCCESSFUL!"
            echo "Environment: ${{ steps.set-env.outputs.ENVIRONMENT }}"
            echo "Version deployed: ${{ steps.set-env.outputs.IMAGE_TAG }}"
            echo "Git commit: ${{ github.sha }}"
            echo "Deployed by: ${{ github.actor }}"
            echo "================================================"
            
            # Save deployment info ONLY after confirming containers are updated
            # Check if containers are actually running the new version
            echo "Verifying containers are running latest version before updating CURRENT_VERSION..."
            CONTAINERS_UPDATED=false
            
            # For non-Watchtower scenarios (first deployment or stopped containers), always update
            if ! docker ps | grep -q mizual-watchtower || [ ! -f /opt/mizual/CURRENT_VERSION ]; then
              CONTAINERS_UPDATED=true
              echo "Non-Watchtower scenario or first deployment - updating version file"
            else
              # For Watchtower scenario, verify containers are actually updated
              BACKEND_IMAGE=$(docker ps --format "{{.Image}}" --filter "name=mizual-backend" | head -1)
              CELERY_IMAGE=$(docker ps --format "{{.Image}}" --filter "name=mizual-celery" | head -1)
              
              if [ "$BACKEND_IMAGE" = "localhost:5000/mizual-backend:latest" ] && [ "$CELERY_IMAGE" = "localhost:5000/mizual-celery:latest" ]; then
                CONTAINERS_UPDATED=true
                echo "Containers confirmed running latest images"
              else
                echo "WARNING: Containers not yet updated, skipping CURRENT_VERSION update"
                echo "Backend image: $BACKEND_IMAGE"
                echo "Celery image: $CELERY_IMAGE"
              fi
            fi
            
            # Only update version file if containers are confirmed updated
            if [ "$CONTAINERS_UPDATED" = "true" ]; then
              # Check if CURRENT_VERSION exists as a directory and remove it
              if [ -d /opt/mizual/CURRENT_VERSION ]; then
                echo "WARNING: CURRENT_VERSION exists as a directory, removing it..."
                rm -rf /opt/mizual/CURRENT_VERSION
              fi
              
              # Create the version file
              echo "${{ steps.set-env.outputs.IMAGE_TAG }}" > /opt/mizual/CURRENT_VERSION
              echo "Commit: ${{ github.sha }}" >> /opt/mizual/CURRENT_VERSION
              echo "Deployed: $(date)" >> /opt/mizual/CURRENT_VERSION
              echo "Branch: ${{ github.ref_name }}" >> /opt/mizual/CURRENT_VERSION
              echo "✓ CURRENT_VERSION file updated"
            else
              echo "⚠ CURRENT_VERSION file NOT updated - containers not yet running new version"
            fi
            
            # Clean up transferred image
            rm ~/mizual-image.tar.gz
            
            # Clean up backup files if they exist
            if [ -d /tmp/mizual-backup ]; then
              echo "Cleaning up backup files..."
              rm -rf /tmp/mizual-backup
            fi
          ENDSSH
          
      - name: Verify deployment
        run: |
          sleep 10
          ssh -i ~/.ssh/deploy_key ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }} << 'ENDSSH'
            echo "Checking container status..."
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}" | grep -E "mizual|registry|watchtower"
            
            echo ""
            echo "Current deployed version:"
            cat /opt/mizual/CURRENT_VERSION 2>/dev/null || echo "Version file not found"
            
            echo ""
            echo "Checking health endpoint..."
            curl -f http://localhost/health || echo "Health check pending..."
            
            echo ""
            echo "Registry contents:"
            curl -s http://localhost:5000/v2/mizual-backend/tags/list | python3 -c "import sys,json; data=json.load(sys.stdin); [print(tag) for tag in data.get('tags',[])]" | grep -E '^(dev|prod)-' | head -5 || echo "No versioned tags found"
          ENDSSH
      
      - name: Wait for Watchtower and verify deployment
        run: |
          echo "Waiting for Watchtower to detect and deploy new image..."
          echo "Expected deployment version: ${{ steps.set-env.outputs.IMAGE_TAG }}"
          
          # Wait up to 3 minutes (Watchtower polls every 1 minute + buffer)
          max_attempts=12  # 12 attempts * 15 seconds = 3 minutes
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            attempt=$((attempt + 1))
            echo "Attempt $attempt/$max_attempts: Checking deployment status..."
            
            # Check if the version endpoint returns the expected version
            if response=$(ssh -i ~/.ssh/deploy_key ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }} "curl -s http://localhost/version"); then
              echo "Version endpoint response: $response"
              
              # Extract version_tag from JSON response
              if deployed_version=$(echo "$response" | python3 -c "import sys,json; data=json.load(sys.stdin); print(data.get('version_tag',''))" 2>/dev/null); then
                echo "Currently deployed version: $deployed_version"
                echo "Expected version: ${{ steps.set-env.outputs.IMAGE_TAG }}"
                
                if [ "$deployed_version" = "${{ steps.set-env.outputs.IMAGE_TAG }}" ]; then
                  echo "SUCCESS: Deployment verified! Version ${{ steps.set-env.outputs.IMAGE_TAG }} is now live."
                  
                  # Final health check
                  echo "Performing final health check..."
                  if ssh -i ~/.ssh/deploy_key ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }} "curl -f --connect-timeout 10 --max-time 30 http://localhost/health"; then
                    echo "Health check passed"
                    echo "Zero-downtime deployment completed successfully!"
                    exit 0
                  else
                    echo "WARNING: Deployment version matches but health check failed"
                    echo "Deployment is successful but health endpoint not responding as expected"
                    exit 1
                  fi
                fi
              else
                echo "Could not parse version from API response"
              fi
            else
              echo "API not responding, waiting..."
            fi
            
            if [ $attempt -lt $max_attempts ]; then
              echo "Waiting 15 seconds before next check..."
              sleep 15
            fi
          done
          
          echo "TIMEOUT: Deployment verification failed after 3 minutes"
          echo "This could mean:"
          echo "1. Watchtower hasn't detected the new image yet (wait longer - polls every 1 minute)"
          echo "2. There's an issue with the new image"
          echo "3. The version endpoint is not working"
          
          # Show final status for debugging
          ssh -i ~/.ssh/deploy_key ${{ steps.set-env.outputs.DEPLOY_USER }}@${{ steps.set-env.outputs.DEPLOY_HOST }} << 'ENDSSH'
            echo ""
            echo "=== FINAL STATUS FOR DEBUGGING ==="
            echo "Watchtower logs (last 20 lines):"
            docker logs mizual-watchtower --tail 20 || echo "Could not get Watchtower logs"
            echo ""
            echo "Container status:"
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.CreatedAt}}" | grep mizual || echo "No mizual containers found"
            echo ""
            echo "Version file contents:"
            cat /opt/mizual/CURRENT_VERSION 2>/dev/null || echo "Version file not found"
          ENDSSH
          
          # Fail the workflow since deployment verification timed out
          exit 1
      
      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
          docker rmi ${{ env.IMAGE_NAME }}:${{ steps.set-env.outputs.IMAGE_TAG }} || true