# Ultra-slim Dockerfile - Target: <250MB
# Stage 1: Builder with minimal dependencies
FROM python:3.11.9-alpine AS builder

WORKDIR /build

# Install ONLY essential build dependencies
RUN apk add --no-cache --virtual .build-deps \
    gcc \
    musl-dev \
    libffi-dev \
    # Minimal vips build deps
    vips-dev \
    pkgconfig

# Create optimized requirements (remove heavy packages if possible)
COPY requirements.txt requirements-original.txt

# Create slim requirements - remove or replace heavy packages
RUN echo "fastapi==0.111.0" > requirements-slim.txt && \
    echo "uvicorn[standard]==0.29.0" >> requirements-slim.txt && \
    echo "python-multipart==0.0.9" >> requirements-slim.txt && \
    echo "psycopg[binary]==3.2.9" >> requirements-slim.txt && \
    echo "httpx==0.27.0" >> requirements-slim.txt && \
    echo "redis==5.0.4" >> requirements-slim.txt && \
    echo "celery==5.4.0" >> requirements-slim.txt && \
    echo "slowapi==0.1.9" >> requirements-slim.txt && \
    echo "python-dotenv==1.0.1" >> requirements-slim.txt && \
    echo "psutil==5.9.8" >> requirements-slim.txt && \
    echo "pyvips==2.2.3" >> requirements-slim.txt && \
    echo "boto3==1.34.108" >> requirements-slim.txt && \
    echo "google-generativeai==0.5.4" >> requirements-slim.txt

# Install minimal Python packages
RUN pip install --no-cache-dir --prefix=/install -r requirements-slim.txt

# Remove .pyc files and unnecessary files to save space
RUN find /install -name "*.pyc" -delete && \
    find /install -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /install -name "*.pyo" -delete && \
    find /install -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /install -name "test" -type d -exec rm -rf {} + 2>/dev/null || true

# Stage 2: Ultra-minimal runtime
FROM python:3.11.9-alpine AS ultra-slim

WORKDIR /code

# Install ONLY runtime libraries (no dev packages)
RUN apk add --no-cache \
    # Minimal vips runtime
    vips \
    # Essential for health checks
    curl \
    # PostgreSQL client library
    libpq && \
    # Clean package cache
    rm -rf /var/cache/apk/*

# Copy only compiled packages
COPY --from=builder /install /usr/local

# Copy application code
COPY . /code

# Create non-root user
RUN adduser -D -s /bin/sh mizual && \
    chown -R mizual:mizual /code

USER mizual

# Minimal health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=2 \
    CMD curl -f http://localhost:8000/health || exit 1

EXPOSE 8000

CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000"]